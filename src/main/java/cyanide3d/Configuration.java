package cyanide3d;

import org.hibernate.SessionFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.util.Properties;

public class Configuration {

    private final SessionFactory sessionFactory;
    Logger logger = LoggerFactory.getLogger(Configuration.class);
    private final Properties properties;
    private static final Configuration instance = new Configuration();
    private final File configFile;

    private Configuration() {
        final String profile = "hibernate.cfg.xml";
        sessionFactory = new org.hibernate.cfg.Configuration().configure(profile).buildSessionFactory();
        properties = new Properties();
        String config = "settings.properties";
        configFile = new File(config);
        if (configFile.isFile()) {
            try {
                properties.load(new FileInputStream(configFile));
                logger.info("Loading config file...");
            } catch (IOException e) {
                logger.error("Failed load config file: ", e);
            }
        } else {
            try {
                properties.store(new FileWriter(configFile), "default autogenerated config");
                properties.setProperty("TOKEN", "");
                properties.setProperty("VK_PORT", "");
                properties.setProperty("LISTENER_PORT", "");
                properties.setProperty("OWNER_ID", "");
                properties.setProperty("PREFIX", "$");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public static Configuration getInstance() {
        return instance;
    }

    public String getToken() {
        return properties.getProperty("TOKEN");
    }

    public String getVkPort() {
        return properties.getProperty("VK_PORT");
    }

    public String getListenerPort() {
        return properties.getProperty("LISTENER_PORT");
    }

    public String getOwner() {
        return properties.getProperty("OWNER_ID");
    }

    public String getPrefix() {
        return properties.getProperty("PREFIX");
    }

    public void setPrefix(String prefix) {
        properties.setProperty("PREFIX", prefix);
        try {
            properties.store(new FileWriter(configFile), null);
        } catch (IOException e) {
            logger.error("Failed update prefix: ", e);
        }
    }

    public SessionFactory getSessionFactory() {
        return sessionFactory;
    }
}
