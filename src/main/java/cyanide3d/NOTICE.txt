FUNCTIONS FOR MAIN SERVER:
 - add role for level (GainExpAction)
 - discord - vk

OOP:
 - nahuy getters, setters, static methods
 - use interfaces and OOP patterns
 - if one of fields equals null - create another model for the situation
 - model structure: state, behavior
 - NEVER RETURN NULL, ONLY EXCEPTION OR NULLOBJECT
 - try catch finally
 - String.format or MessageFormat
 - USE MORE OPTIONAL

ROBERT MARTIN - CLEAN CODE:
 - Каждая функция делает то, что вы от неё ожидали
 - Не содержит дубликаты
 - Читаемый и поддерживаемый другим разрабом
 - Содержит минимум связей, классов, методов
 - Не найдётся способов для улучшения кода (тщательность)
 - Содержательные имена
 - Постоянное совершенствование кода
 - Тесты тесты и еще раз тесты


 - Давать внятные названия переменным(в т.ч. константы и статики)(42)
(Никаких не информативных элементов, не назввать методы сущ. объектами, если метод с ними не взаимодействует, переменные должно быть легко искать(46))
 - Пытаться по необходимости сформировать объект(42)
(Если есть несколько переменных, которые относятся к другому объекту, или если есть затруднения для понимания их предназначения(53))
 - Имена классов - сущ., имена методов - глаголы(49)
(Действия метода должны отражаться в названии, ничего не должно быть сокрыто(70), прим: getPageNameOrDefault)
 - При перезагрузке конструкторов - статик методы класса(49)
 - Использовать одни названия для одних и тех же действий(50)
(При наличии повторов возможно стоит подыскать более точное название)
 - По возможности использовать общие для всех термины(51)
(Название паттернов, алгоритмов и т.д.)
 - Не добавлять избыточный контекст(54)
 - Для анализа(58)
 - Методы необходимо сокращать до минимальных размеров(<20 строк)(59)
 - Стараться уменьшить содержимое циклов и операторов до строчки(60)
 - Метод должен выполнять только одну задачу на одном уровне абстракции(61)
(Низя смешивать код с разных уровней абстракции)
 - Код должен писаться сверху вниз (62-77)
 - Свич - антипатерн, прятать в низкоуровневых объектах(63)
(Можно прятать в абстрактную фабрику(64))
 - У метода должно быть как можно меньше аргументов(65)
(Возможно стоит создать объект для большей части аргументов(69))
 - Не передавать флажки в методы, лучше сделать метод под каждый случай(67)
 - Если метод ничего не возвращает то он должен менять входные данные, в ином случае он должен работать с копией входных данных
(Лучше всего, что бы метод изменял состояние только своего объекта, внутри которого он находится(71))
 - Если метод при изменении объекта должен что то вернуть(бул и т.д.), то проверку и изменение состояния лучше вынести в отдельные методы(72)
(Лучше использовать эксепшены, в случае если что то пошло не так)
 - Для красоты блоки try catch нужно пихать в отдельные методы(73)
(И ничего кроме ловли ошибок туда не пихать)
 - Вместо использования ENUM или других классов с типами ошибок лучше использовать throw(74)
(Меньше зависимостей и больше профита)
 - DRY
 - Нужно минимизировать кол-во continue, break, return
 - Комментарии вред, если по коду не понятно то, что оно делает, то нужно переписовать код, а не пилить коммент(82)
 - Вертикальное форматирование(104)
(Переменные экзмемпляров в начало класса, остальные переменныне вначале функции, блоки распологать сверху вниз, по уменьшению уровня абстракции компонентов и вызовов)
(Не хранить переменные высокого уровня абстракции в методах низкого уровня(112, если много объявлений переменных, то возможно стоит разбить на классы))
 - Горизонтальное форматирование(113)
(Ограничивать число букв в строке, определять связи пробелами, пример(119))
 - Интерфейсы и полиморфизм - наше всё(125)
 - Закон деметры(инкапсуляция)(127)

MESSAGE CONTROL SYSTEM:
 - mute and read only for a while
 - read only for use ban words
 - ...

NEXT:
 - cassandra, docker, jboss, mongodb, kafka
 - lang scala, kotlin
 - ForkJoinPool, FixedJoinPool, executors, Stream(parallel)

FROM command VK:
 commandEvent.reply("**Группа ВК:** <https://vk.com/def1ants>\n" +
                "**Беседка ВК:** <https://vk.me/join/5haZdNdhVneQUIr43Hy249LHEuXOk8CFDwI=>\n\n" +
                "*При вступлении **обязательно** указывайте свой игровой никнейм!*");

FROM join EVENT:
        try {
            Role role = event.getGuild().getRolesByName("Гости", true).get(0);
            event.getGuild().addRoleToMember(user.getId(), role).queue();
        } catch (Exception e) {
            logger.error("Failed add role in CyanoListener ", e);
        }


FROM join message EVENT:
        event.getUser().openPrivateChannel().queue(channel ->
                channel.sendMessage(localization
                        .getMessage("privatemessage.join"))
                        .queue());
privatemessage.join=Добро пожаловать на дискорд сервер клана ***Defiant'S***\nСперва рекомендуем ознакомиться с ***#правила-клана*** и ***#информация-о-клане***\nПо желанию вступить в наш дружный клан вы можете оставить свою заявку на вступление в соответствующем канале. Информацию по заполнению заявки вы сможете найти в канале с заявками в закреплённом сообщении.\nПо всем вопросам обращайтесь к модераторам либо к главе клана.\n\n***Пример заявки на вступление:***\n```1. Евпатий\n2. 14\n3. Нагибатор227\n4. 3-4 часа\n5. 40\n6. -\n7. МСК+3\n8. дс вф```\nПри этом **обязательно необходимо** соблюсти нумерацию и переносы строк.

