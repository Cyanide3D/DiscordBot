FUNCTIONS FOR MAIN SERVER:
 - add role for level (GainExpAction)
 - discord - vk

OOP:
 - nahuy getters, setters, static methods
 - use interfaces and OOP patterns
 - if one of fields equals null - create another model for the situation
 - model structure: state, behavior
 - NEVER RETURN NULL, ONLY EXCEPTION OR NULLOBJECT
 - try catch finally
 - String.format or MessageFormat
 - USE MORE OPTIONAL

ROBERT MARTIN - CLEAN CODE:
 - Каждая функция делает то, что вы от неё ожидали
 - Не содержит дубликаты
 - Читаемый и поддерживаемый другим разрабом
 - Содержит минимум связей, классов, методов
 - Не найдётся способов для улучшения кода (тщательность)
 - Содержательные имена
 - Постоянное совершенствование кода
 - Тесты тесты и еще раз тесты


 - Давать внятные названия переменным(в т.ч. константы и статики)(42)
(Никаких не информативных элементов, не назввать методы сущ. объектами, если метод с ними не взаимодействует, переменные должно быть легко искать(46))
 - Пытаться по необходимости сформировать объект(42)
(Если есть несколько переменных, которые относятся к другому объекту, или если есть затруднения для понимания их предназначения(53))
 - Имена классов - сущ., имена методов - глаголы(49)
(Действия метода должны отражаться в названии, ничего не должно быть сокрыто(70), прим: getPageNameOrDefault)
 - При перезагрузке конструкторов - статик методы класса(49)
 - Использовать одни названия для одних и тех же действий(50)
(При наличии повторов возможно стоит подыскать более точное название)
 - По возможности использовать общие для всех термины(51)
(Название паттернов, алгоритмов и т.д.)
 - Не добавлять избыточный контекст(54)
 - Для анализа(58)
 - Методы необходимо сокращать до минимальных размеров(<20 строк)(59)
 - Стараться уменьшить содержимое циклов и операторов до строчки(60)
 - Метод должен выполнять только одну задачу на одном уровне абстракции(61)
(Низя смешивать код с разных уровней абстракции)
 - Код должен писаться сверху вниз (62-77)
 - Свич - антипатерн, прятать в низкоуровневых объектах(63)
(Можно прятать в абстрактную фабрику(64))
 - У метода должно быть как можно меньше аргументов(65)
(Возможно стоит создать объект для большей части аргументов(69))
 - Не передавать флажки в методы, лучше сделать метод под каждый случай(67)
 - Если метод ничего не возвращает то он должен менять входные данные, в ином случае он должен работать с копией входных данных
(Лучше всего, что бы метод изменял состояние только своего объекта, внутри которого он находится(71))
 - Если метод при изменении объекта должен что то вернуть(бул и т.д.), то проверку и изменение состояния лучше вынести в отдельные методы(72)
(Лучше использовать эксепшены, в случае если что то пошло не так)
 - Для красоты блоки try catch нужно пихать в отдельные методы(73)
(И ничего кроме ловли ошибок туда не пихать)
 - Вместо использования ENUM или других классов с типами ошибок лучше использовать throw(74)
(Меньше зависимостей и больше профита)
 - DRY
 - Нужно минимизировать кол-во continue, break, return
 - Комментарии вред, если по коду не понятно то, что оно делает, то нужно переписовать код, а не пилить коммент(82)
 - Вертикальное форматирование(104)
(Переменные экзмемпляров в начало класса, остальные переменныне вначале функции, блоки распологать сверху вниз, по уменьшению уровня абстракции компонентов и вызовов)
(Не хранить переменные высокого уровня абстракции в методах низкого уровня(112, если много объявлений переменных, то возможно стоит разбить на классы))
 - Горизонтальное форматирование(113)
(Ограничивать число букв в строке, определять связи пробелами, пример(119))
 - Интерфейсы и полиморфизм - наше всё(125)
 - Закон деметры(инкапсуляция)(127)
 - В try catch пихать метод, в методе логику, которая выкидывает эксепшент(134)
 - Можно клепать обёртки для обработчиков исключений(138)
 - Вместо дефолтных значений в catch, лучше сделать шоб метод возвращал дефолтное значение(139)
 - По возможности инкапсулировать внутреннее состояние объекта(мапы, листы, etc)(145)
 - Учебные тесты для бога тестов (148)
 - Адаптер ван лав(149)
 - TDD(153)
 - Паттерн для тестов(157)
 - Given-when-then tests
 - Концепция FIRST(163)
 - Методы класса должны соответствовать задаче класса, которая выводится из имени класса(168)
 - Принцип единой ответственности(169)
 - Нужно шоб в классе было минимум переменных экземпляров других классов(170)
(При этом желательно шоб внутри класса между всеми компанентами была высокая связанность)
 - SQL(177)
 - Изоляция изменений за счёт интерфейсов(180)
(Объект, реализующий интерфейс можно передавать в конструктор)
 - Конструирование объектов в MAIN(184)
 - Правила архитектуры(201)
 - При многопоточке отделять реализацию многопоточки от другого кода(212)
 - При многопоточке ограничить область видимости данных(213)
 - Вместо синхронизированных блоков можно предоставлять потокам копии объектов, а потом их объеденять(213)
 - Желательно сделать потоки как можно более независимыми друг от друга
(HttpServlet со своими doPost & doGet)
 - Термины многопоточки(215)
 - "Производитель-потребитель"(215)
 - "Читатели-писатели"(216)
 - "Жующие философы"(216)
 - Избегать зависимостей между sync методами(217)
(Чем меньше sync методов, тем лучше)
 - sync методы должны быть как можно меньше(218)
 - Если программа по окончанию работы должна завершиться, то о реализации завершения нужно думать заранее(218)
 - Если раз в год проявляется ошибка в многопоточном коде, то скорее всего проблема в коде и её нужно найти
(Протестить в однопоточном режиме код, собрать переключатель конфигураций многопоточного кода(кол-во потоков и т.д.))
(Реализовать лёгкий доступ к конфигу потоков, возможно сделать авто подгон кол-ва потоков для оптимальной работы системы)
(Протестировать систему с кол-во потоков, превышающих кол-во ядер процессора)
(Инструментовка кода(тыкать всюду yield и т.д.) 222)
 - Заключение по многопоточке(224)
 - Классный пример(228)
 - Код компаратора(291)
 - "Запахи"(324)
 - Многопоточка клиент-сервер(360)
 - Инструкции JVM(366)
 - Библиотеки многопоточки(368)
 - В случае необходимости преобразования итератора и т.д. в потокобезоасный, можно воспользоваться адаптером(375)
 - Необходимо делать синхранизированные блоки как можно меньше(376)
 - 4 условия возникновения дэллока(379)
 - Полный код клиента-сервера(386)
 - SerialDate(392)

MARTIN FAULER - REFACTORING
 -

TRANSACTION ISOLATION
 - Default - TRANSACTION_READ_UNCOMMITED
 - Dirty read - TRANSACTION_READ_COMMITED
 - Non repeatable reads - TRANSACTION_REPEATABLE_READS
 - Phantom reads - TRANSACTION_SERIALIZABLE

НОРМАЛЬНЫЕ ФОРМЫ БД:
https://habr.com/ru/post/254773/
 - Первая:
 Атомарность данных в таблице.
 - Вторая:
 Все атрибуты должны описывать праймари кей
 - Третья:
 Атрибуты зависят от праймари кея
 - Бойса кодда
 Хрень какая то, связана с декомпозицией
 - Четвёртая


ACID
 - A - Atomicy
 - C - Consistency
 - I - Isolation
 - D - Durability

NEXT:
 - cassandra, jboss, mongodb, kafka
 - ForkJoinPool, FixedJoinPool, executors, Stream(parallel)

